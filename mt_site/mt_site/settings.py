"""
Django settings for mt_site project.

Generated by 'django-admin startproject' using Django 3.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os
from datetime import timedelta


# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
from environs import Env

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

env = Env()
env.read_env(
    os.path.join(os.sep, BASE_DIR, '.env'),
    recurse=False,
    override=True
)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'u@c!i^29s*@_$)7&$$t&=o0)4g_5f*&kwjh_ln2$o8290lp*d@'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env.bool('DEBUG', True)

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'corsheaders',
    'django_celery_beat',
    'rest_framework',
    'tenant_router.apps.TenantRouterConfig',
    'django_orm_sample.apps.DjangoOrmSampleConfig',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'tenant_router.middleware.TenantContextMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'mt_site.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'mt_site.wsgi.application'

# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

CORS_ALLOW_ALL_ORIGINS = True

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "TEST": {
            'DEPENDENCIES': [],
        },
    }
}

TENANT_ROUTER_MONGO_SETTINGS = {
    "default": {}
}

DATABASE_ROUTERS = [
    'tenant_router.orm_backends.django_orm.router.DjangoOrmRouter'
]

TENANT_ROUTER_ORM_SETTINGS = {
    'django_orm': {
        'SETTINGS_KEY': 'DATABASES',
    }
}

TENANT_ROUTER_SERVICE_NAME = 'mt_site'

TENANT_ROUTER_PUBSUB_SETTINGS = {
    'BACKEND': 'tenant_router.pubsub.backends.redis.RedisPubSub',
    'LOCATION': {
        'HOST': env.str('REDIS_HOST', '0.0.0.0'),
        'PORT': env.str('REDIS_PORT', '9600')
    }
}

TENANT_ROUTER_PUBSUB_ENABLED = True

CACHES = {
    "default": {},
    "tenant_router_config_store": {
        "BACKEND": "django_redis.cache.RedisCache",
        "TIMEOUT": None,
        "LOCATION": "redis://{REDIS_HOST}:{REDIS_PORT}/{REDIS_DB}".format(
            REDIS_HOST=env.str('REDIS_HOST', '0.0.0.0'),
            REDIS_PORT=env.str('REDIS_PORT', '9600'),
            REDIS_DB=env.str('REDIS_DB', '8')
        ),
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
            "SERIALIZER": "django_redis.serializers.json.JSONSerializer"
        }
    }
}


CELERY_RESULT_BACKEND = "redis://{REDIS_HOST}:{REDIS_PORT}/{REDIS_DB}".format(
    REDIS_HOST=env.str('REDIS_HOST', '0.0.0.0'),
    REDIS_PORT=env.str('REDIS_PORT', '9600'),
    REDIS_DB=env.str('CELERY_RESULT_DB', '1')
)

CELERY_BROKER_URL = "redis://{REDIS_HOST}:{REDIS_PORT}/".format(
    REDIS_HOST=env.str('REDIS_HOST', '0.0.0.0'),
    REDIS_PORT=env.str('REDIS_PORT', '9600')
)

# CELERY_BEAT_SCHEDULE = {
#     'every_ten_seconds_sample_com': {
#         'task': 'mongo_sample.tasks.print_users',
#         'schedule': timedelta(seconds=10),
#     },
# }


LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "void": {
            "format": ""
        },
        "standard": {
            "format": "%(asctime)s [%(levelname)s] %(name)s %(funcName)s:%(lineno)d - %(message)s"
        }
    },
    "handlers": {
        "default": {
            "level": "INFO",
            "class": "logging.handlers.RotatingFileHandler",
            "formatter": "standard",
            "filename": "app.log",
            "maxBytes": 20971520,
            "mode": "a+",
            "backupCount": 6,
            "encoding": "utf8"
        },
        "application_handler": {
            "level": "INFO",
            "class": "logging.handlers.RotatingFileHandler",
            "formatter": "void",
            "filename": "applicationServer.log",
            "maxBytes": 10485760,
            "mode": "w",
            "backupCount": 4,
            "encoding": "utf8"
        },
    },
    "loggers": {
        "": {
            "handlers": [
                "default"
            ],
            "level": "INFO",
            "propagate": False
        },
        "application": {
            "handlers": [
                "application_handler"
            ],
            "level": "INFO",
            "propagate": False
        },
    }
}

# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATIC_URL = '/static/'

STATIC_ROOT = os.path.join(os.sep, BASE_DIR, 'static')

